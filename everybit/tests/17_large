# Tests larger cases

# 0: divisble by 8; rotate 1 right
t 0

n 000011110000111100001111000011110000111100001111
r 0 48 1
e 100001111000011110000111100001111000011110000111

# 1: divisible by 8; rotate 1 left
t 1

n 000011110000111100001111000011110000111100001111
r 0 48 -1
e 000111100001111000011110000111100001111000011110

# 2: divisible by 8; rotate 2 right
t 2

n 000011110000111100001111000011110000111100001111
r 0 48 2
e 110000111100001111000011110000111100001111000011

# 3: divisible by 8: rotate 2 left
t 3

n 000011110000111100001111000011110000111100001111
r 0 48 -2
e 001111000011110000111100001111000011110000111100

# 4: offset in middle of byte
t 4

n 000011110000111100001111000011110000111100001111
r 3 41 2
e 000000111100001111000011110000111100001111001111

# 5: bit_length = 31
t 5

n 010101011010101001010101101010100101
r 1 31 32
e 001010101101010100101010110101010101

# 6: bit_length = 30
t 6

n 11111111110010110100101101001011010010110
r 9 30 -33
e 11111111110110100101101001011010010110010

# 7: odd length array
t 7

n 010101010101010101010101010101010101010101010101010101011
r 0 57 -115
e 101010101010101010101010101010101010101010101010101010110

# 30 bits in subarray, only 2 full bytes
t 8

n 10100001011111111111100011010001
r 1 30 5
e 10100001000010111111111111000111