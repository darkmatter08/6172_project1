# Copyright (c) 2012 MIT License by 6.172 Staff
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.


# Instructions for writing a test:
#
# t: initializes new test
# n: initializes bit array
# r: rotates bit array subset at offset, length by amount
# e: expects raw bit array value

# 0: headerexample (Verify the examples given in bitarray.h)
t 0

n 10010110
r 0 8 -1
e 00101101

# 1: second headerexample (Verify the examples given in bitarray.h)
t 1

n 10010110
r 2 5 2
e 10110100


# 2: 8bit
t 2

n 10000101
r 0 8 0
e 10000101

r 0 8 1
e 11000010

r 0 8 -1
e 10000101

r 0 8 -1
e 00001011

r 0 8 -11
e 01011000

# 3: 0 offset, 0 length, testing to confirm no change 
t 3

n 10010011
r 0 0 0
e 10010011

r 0 0 -5
e 10010011

r 0 0 5
e 10010011

# 4: 0 offset, positive length, various rotation amounts covering each case
t 4

n 00101000
r 0 5 -12
e 10100000

r 0 5 -2
e 10010000

r 0 5 0
e 10010000

r 0 5 3
e 01010000

r 0 5 12  
e 10010000

r 0 5 5
e 10010000

r 0 5 10
e 10010000

r 0 5 -5
e 10010000

r 0 5 -10
e 10010000

#length results in entire bitstring being rotated
r 0 8 0
e 10010000

r 0 8 4
e 00001001

r 0 8 -4
e 10010000

r 0 8 15
e 00100001

r 0 8 -10
e 10000100

r 0 8 8
e 10000100

r 0 8 -8
e 10000100

r 0 8 16
e 10000100

r 0 8 -16
e 10000100

# 5: offset to last element
t 5

n 10011000 
r 7 0 0
e 10011000

r 7 1 1
e 10011000

#"rotating" a single element multiple times
r 7 1 4
e 10011000

r 7 1 20
e 10011000

# 6: offset midway, test wrap-around left, non-wrap left, non-wrap right, wrap-around right, and multiples of length in both directions
t 6

n 00111001
r 2 4 -7
e 00011101

r 2 4 -2
e 00110101

r 2 4 1
e 00111001

r 2 4 9
e 00011101

#rotating a multiple of 4 shouldn't do anything
r 2 4 4
e 00011101

r 2 4 -4
e 00011101

r 2 4 8
e 00011101

r 2 4 -8
e 00011101

# testing multi byte rotates

t 6

n 110100100101110100101010100101110101100101010101110101010001010110101010101010101110101010100001110

r 2 30 4
e 110111010010010111010010101010010101100101010101110101010001010110101010101010101110101010100001110

### 6: 20bit

t 7

n 11111111110000000000

r 0 20 10

e 00000000001111111111


### 5: 40bit

t 8

n 1001010111001001101110100010111110111010

r 20 20 10

e 1001010111001001101111101110101010001011


r 10 20 10

e 1001010111111011101000100110111010001011


r 0 40 10

e 1010001011100101011111101110100010011011


### 7: 40bit 

t 9

n 0111111111000000000011111111100000000000

r 0 40 12

e 1000000000000111111111000000000011111111




