#include <limits.h>

# Instructions for writing a test:
#
# t: initializes new test
# n: initializes bit array
# r: rotates bit array subset at offset, length by amount
# e: expects raw bit array value

# Testing Bitarray

# 0: Array size 1, Zero Length, Shift of Zero, Bit = 0
t 0

n 0
r 0 0 0
e 0

# 1: Array size 1, Zero length, Shift of Zero, Bit = 1
t 1

n 1
r 0 0 0
e 1

# 2: Array size 1, One length, Shift of Zero, Bit = 0
t 2

n 0
r 0 1 0
e 0

# 3: Array size 1, One length, Shift of Zero, Bit = 1
t 3

n 1
r 0 1 0
e 1

# 4: Array size 1, One length, Shift of One, Bit = 0
t 4

n 0
r 0 1 1
e 0

# 5: Array size 1, One length, Shift of One, Bit = 1
t 5

n 1
r 0 1 1
e 1

# 6: Array size not divisible by 8
t 6

n 010
r 0 3 1
e 001

# 7: Array of all 0s
t 7

n 00000000
r 2 6 4
e 00000000

# 8: Array of all 1s
t 8

n 11111111
r 5 2 2
e 11111111

# 9: Max array size?
t 9

n MAX_INT
r 0 sizeof(MAX_INT) sizeof(MAX_INT)
e MAX_INT


# Testing Bit Offset

# 10: Offset of 0, length == rotate
t 10

n 01001101
r 0 3 3
e 01001101

# 11: Offset equal to array size
t 11

n 01001101
r 7 1 1
e 01001101

# Testing Bit Length

# 12: Bit length of zero, Shift = 0
t 12

n 01001101
r 3 0 0
e 01001101

# 13: Bit length of zero, Shift != 0
t 13

n 01001101
r 4 0 2
e 01001101

# 14: Positive, equal to array size - offset w/ offset = 0
t 14

n 01100
r 0 5 3
e 10001

# 15: Positive, equal to array size - offset w/ offset != 0
t 15

n 000011111
r 4 5 1
e 000011111

# Testing Rotate Test Suite

# 16: MININT Rotate?
t 16

n 1101011
r 0 7 INT_MIN
e 1101011

# 17: Negative Rotate, Greater than array size
t 17

n 110111
r 0 6 -7
e 101111

# 18: Negative Rotate, Less than array size
t 18

n 011001
r 0 6 -3
e 001011

# 19: Rotate of -1
t 19

n 0111110
r 3 4 -1
e 0111101

# 20: Rotate of 0
t 20

n 01101100
r 3 3 0
e 01101100

# 21: Rotate of 1
t 21

n 01001000
r 3 4 1
e 01000100

# 22: Positive Rotate, Less than array size
t 22

n 010110
r 0 4 3
e 101010

# 23: Positive Rotate, Greater than array size
t 23

n 011100
r 3 3 7
e 011010

# 24: MAXINT Rotate?
t 24

n 00110101
r 0 8 UINT_MAX
e 00110101

# MISCELLANEOUS

# 25: Array size 13, 0 length, positive rotate
t 25

n 1000000000000
r 0 0 4
e 1000000000000

# 26: Array size 7, 0 length, negative rotate
t 26

n 0111111
r 0 0 -2
e 0111111

# 27: bit array size 15
t 27

n 101001011110001
r 10 3 1
e 101001011101001

# 28: 
t 28

n
r 0 633 2 
e
