
# Testing two different sizes:
# - Array with length greater than a byte
# - Array with length much greater than a byte
#
# Within each size we will be testing the different types of rotations
# negative/positve
#	-0 rotations
#	-1 rotation
#	-more than 1
#	-exactly bit_length
#	-more than bit_length
#	-a lot more than bit length

# Note that in our testing we try to avoid strings with redundant patterns. This ensures that the rotations modify the strings properly.

# Test 1: Length of an Array more than a byte
# zero rotation
t 0

n 01101011100
r 0 11 0
e 01101011100

# -1 rotation
t 1

n 01101011100
r 0 11 -1
e 11010111000

# >-1 rotation
t 2

n 01101011100
r 0 11 -2
e 10101110001

# left rotation equal to bit_offset
t 3

n 01101011100
r 0 11 -11
e 01101011100 

# Left rotation greater than bit_offset
t 4

n 01101011100
r 0 11 -14 
e 01011100011

# Left rotation much greater than bit_offset
t 5

n 01101011100
r 0 11 -800
e 10001101011

# 1 rotation
t 6

n 01101011100
r 0 11 1
e 00110101110 

# >1 rotation
t 7 

n 01101011100
r 0 11 2
e 00011010111

# Right rotation equal to bit_offset
t 8 

n 01101011100
r 0 11 11
e 01101011100

# Right rotation greater than bit_offset
t 9 

n 01101011100
r 0 11 14
e 10001101011

# Right rotation much greater than bit_offset 
t 10

n 01101011100
r 0 11 800
e 01011100011

##### Test 2: Bit array with length much greater than byte
# zero rotation

t 11

n 01001100011100001111010110111001001100000101111001
r 0 50 0
e 01001100011100001111010110111001001100000101111001

# -1 rotation
t 12

n 01001100011100001111010110111001001100000101111001
r 0 50 -1
e 10011000111000011110101101110010011000001011110010

# More than -1 rotation
t 13

n 01001100011100001111010110111001001100000101111001
r 0 50 -2
e 00110001110000111101011011100100110000010111100101

# Rotation equal to bit_offset
t 14

n 01001100011100001111010110111001001100000101111001
r 0 50 -50
e 01001100011100001111010110111001001100000101111001

# Left Rotation greater than bit_offset
t 15

n 01001100011100001111010110111001001100000101111001
r 0 50 -53
e 01100011100001111010110111001001100000101111001010

# Left rotation much greater than bit_offset
t 16 

n 01001100011100001111010110111001001100000101111001
r 0 50 -837
e 00001011110010100110001110000111101011011100100110

# 1 rotation
t 17

n 01001100011100001111010110111001001100000101111001
r 0 50 1
e 10100110001110000111101011011100100110000010111100

# >1 rotation
t 18

n 01001100011100001111010110111001001100000101111001
r 0 50 2
e 01010011000111000011110101101110010011000001011110

# Equal to bit_length rotation
n 01001100011100001111010110111001001100000101111001
r 0 50 50
e 01001100011100001111010110111001001100000101111001

# Right rotation greater than bit_length
n 01001100011100001111010110111001001100000101111001
r 0 50 53
e 00101001100011100001111010110111001001100000101111

# Right rotation much greater than bit_length
n 01001100011100001111010110111001001100000101111001
r 0 50 837
e 00011110101101110010011000001011110010100110001110 
